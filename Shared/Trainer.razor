@inject HttpClient _client
<div class="alert alert-secondary mt-4" role="alert">

    <div>
        <label>Iterations: </label> <input @bind="iterations" type="number" />
        <label>Alpha: </label> <input @bind="Alpha" type="number" step="0.001" />
    </div>

    <a href="#" class="btn btn-primary btn-lg @btn1state" role="button" aria-pressed="true"
       @onclick="StartTraining">
        <span class="@(run ? "spinner-border spinner-border-sm":"")" role="status" aria-hidden="true"></span>
        Start
    </a>
 
    <a href="#" class="btn btn-danger @btn2state" role="button" aria-pressed="true" @onclick="Stop">Stop</a>
    
</div>


<div class="alert alert-secondary mt-4" role="alert">
    <h3>Output</h3>
    <div class="container bg-dark text-light " style="max-height: 250px; overflow-x: scroll;">
        @if (outputs?.Any() == true)

            @for (int i = outputs.Count - 1; i >= 0; i--)
            {

                <div class="row border-dark text-nowrap flex-nowrap" >
                    <div class="col-md-2">
                        Iteration @(i+1) :
                    </div>
                    <div class="col-md-5">
                        @outputs[i].Item1
                    </div>
                    <div class="col-md-5 float-right">
                        @outputs[i].Item2
                    </div>

                </div>

            }
    </div>
</div>


@code {
    bool isDisabled;
    private string btn1state = "";
    private string btn2state = "disabled";
    private int iterations = 10;
    private double Alpha = 0.005;
    private string mushroomcsv;
    private bool run;
    private List<(string, string)> outputs;




    protected override async Task OnInitializedAsync()
    {
        mushroomcsv = await _client.GetStringAsync("static/mushrooms.csv");
        Console.WriteLine("done");
        outputs = new List<(string,string)>();

        StateHasChanged();
    }

    private async Task Stop()
    {
        run = false;
    }

    private async Task StartTraining()
    {
        SwitchState();

        outputs.Clear();
        await Task.Yield();
        run = true;
        await   Start();

        SwitchState();
    }

    public async Task Start()
    {
        var lines = mushroomcsv.Split(Environment.NewLine);

        (List<int> labels, List<int[]> features) = ParseInput(lines);

        ((ndarray trainx, ndarray trainy), (ndarray testx, ndarray testy)) = SplitTable(labels, features, 20);

        var rand = new np.random();
        rand.seed(1);
        long colsize = trainx.shape.iDims[1];
        var weights01 = 0.2 * rand.randn(new shape(colsize, 1)) - 0.1;
        var  alpha = Alpha;


        for (int j = 0; j < iterations; j++)
        {
            double error = 0;
            int correctCnt = 0;
            var imagecount = trainx.Count();
            for (int i = 0; i < imagecount; i++)
            {
                if (i % 500 == 0)
                {
                    await Task.Delay(1);
                    if (!run) break;
                }

                var layer0 = (ndarray)trainx[new Slice(i, i + 1)];
                var layer1 = np.dot(layer0, weights01);
                var label = trainy[i];
                var delta1 = layer1 - label;

                error = (double)(delta1 * delta1);

                var w01update = np.dot(layer0.T, delta1);
                weights01 -= w01update * alpha;

                if ((double)error < 0.25) correctCnt++;
            }
            if (!run) break;

            var percentCorrect = correctCnt * 100 / testx.Count();

            (double percentcorrectT, double errorT) = Test(testx, testy, weights01);
            var trainResult =
                $"Train[ error={error},correct={percentcorrectT}%]";
            var testResult=$"Test [error={errorT},  correct={percentcorrectT}%]";

            outputs.Insert(0,(trainResult,testResult));
            StateHasChanged();
            await Task.Delay(10);

            alpha *= 0.99;
        }
    }

    private (double percentcorrect, double error) Test(ndarray testx, ndarray testy, ndarray weights01)
    {
        int correctCnt = 0;
        double error = 0;
        for (int i = 0; i < testx.Count(); i++)
        {
            var layer0 = (ndarray)testx[new Slice(i, i + 1)];
            var layer1 = np.dot(layer0, weights01);
            var label = testy[i];
            var delta1 = layer1 - label;
            error = (double)(delta1 * delta1);
            if ((double)error < 0.25) correctCnt++;
        }
        var percentCorrect = correctCnt * 100 / testx.Count();
        return (percentCorrect, error);
    }

    private ((ndarray trainx, ndarray trainy), (ndarray testx, ndarray testy))
        SplitTable(List<int> labels, List<int[]> features, int testPercent)
    {
        long colcnt = features[0].Length;
        long rowcnt = features.Count;

        var x = np.array(features.SelectMany(s => s).ToArray());
        x = x.reshape((rowcnt, colcnt));

        var y = np.array(labels.ToArray());
        long testSize = rowcnt * testPercent / 100;

        var trainx = (ndarray)x[new Slice(0, rowcnt - testSize)];
        var trainy = (ndarray)y[new Slice(0, rowcnt - testSize)];

        var testx = (ndarray)x[new Slice(rowcnt - testSize)];
        var testy = (ndarray)y[new Slice(rowcnt - testSize)];

        return ((trainx, trainy), (testx, testy));
    }

    private (List<int> labels, List<int[]> features) ParseInput(IEnumerable<string> lines)
    {
        var label = new List<int>();
        var input = new List<string[]>();

        foreach (var line in lines)
        {

            var items = line.Split(",", StringSplitOptions.RemoveEmptyEntries).ToArray();
            label.Add(items[0] == "e" ? 1 : 0);
            items = items.Skip(1).ToArray();
            var nl = new List<string>();
            nl.AddRange(items.Take(10));
            nl.AddRange(items.Skip(11));
            input.Add(nl.ToArray());
        }

        var headers = input[0];
        var colList = headers.Select(h => new Dictionary<string, int>()).ToArray();

        foreach (var items in input.Skip(1))
        {
            for (int i = 0; i < items.Length; i++)
            {
                if (!colList[i].ContainsKey(items[i])) colList[i].Add(items[i], 0);

                colList[i][items[i]]++;
            }
        }

        for (int i = 0; i < colList.Length; i++)
        {
            colList[i] = colList[i].Where(c => c.Value > 10).ToDictionary(s => s.Key, s => s.Value);
        }



        var featureLst = new List<int[]>();

        foreach (var items in input.Skip(1))
        {
            var rowlst = new List<int>();
            for (int i = 0; i < colList.Length; i++)
            {
                foreach (var key in colList[i].Keys)
                {
                    if (key == items[i]) rowlst.Add(1);
                    else rowlst.Add(0);
                }
            }
            featureLst.Add(rowlst.ToArray());
        }
        return (label, featureLst);
    }



    private void SwitchState()
    {
        var temp = btn1state;
        btn1state = btn2state;
        btn2state = temp;
    }

}
